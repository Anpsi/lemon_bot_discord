- name: Create server
  hosts: localhost
  gather_facts: no

  vars:
    droplet_name: lemon-bot
    droplet_size: 512mb # 512 MB RAM, 20 GB SSD, 1 core
    droplet_region: fra1 # Frankfurt 1
    droplet_image: ubuntu-16-04-x64
    ssh_key_name: lemon-bot

  tasks:
    - name: Add SSH key to DigitalOcean
      digital_ocean:
        api_token: "{{ secrets.digital_ocean_api_token }}"
        command: ssh
        name: "{{ ssh_key_name }}"
        ssh_pub_key: "{{ ssh_key.public }}"
      register: do_ssh_key

    - name: Create droplet
      digital_ocean:
        api_token: "{{ secrets.digital_ocean_api_token }}"
        command: droplet
        name: "{{ droplet_name }}"
        unique_name: yes
        size_id: "{{ droplet_size }}"
        region_id: "{{ droplet_region }}"
        image_id: "{{ droplet_image }}"
        ssh_key_ids: "{{ do_ssh_key.ssh_key.id }}"
      register: droplet

    - name: Add new droplet to host group
      add_host:
        hostname: "{{ droplet.droplet.ip_address }}"
        groupname: server
      changed_when: False


- name: Configure server
  hosts: server
  remote_user: root
  gather_facts: no

  vars:
    app_name: lemon

  pre_tasks:
    - name: Install python on remote machine
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      changed_when: False

  tasks:
    - name: Create group
      group:
        name: "{{ app_name }}"

    - name: Create user
      user:
        name: "{{ app_name }}"

    - name: Copy source to server
      synchronize:
        src: ../src
        dest: "/home/{{ app_name }}"
        delete: yes

    - name: Install required packages
      apt:
        name: "{{ item }}"
      with_items:
        - python3
        - python3-pip

    - name: Install pip dependencies
      pip:
        name: "{{ item }}"
        executable: pip3
      with_items:
        - discord.py
        - cleverbot
        - requests
        - BingTranslator
        - bs4
        - wolframalpha
        - lxml

    - name: Create service
      template:
        src: templates/systemd.service.j2
        dest: "/etc/systemd/system/{{ app_name }}.service"

    - name: Restart app
      service:
        name: "{{ app_name }}"
        state: restarted
